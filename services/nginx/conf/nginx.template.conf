# /etc/nginx/nginx.conf

# NOTE: nginx.conf generated automatically from nginx.template.conf
#       edit nginx.template.conf, NOT nginx.conf!

user                                nginx;
worker_processes                    1;

error_log                           /var/log/nginx/error.log warn;
pid                                 /var/run/nginx.pid;


events {
    worker_connections              256;
}

http {
    include                         /etc/nginx/mime.types;
    default_type                    application/octet-stream;

    # log_format main                 '$remote_addr - $remote_user "$request" '
    #                                 '$status $body_bytes_sent "$http_referer" '
    #                                 '"$http_x_forwarded_for"';

    log_format                      main '0 $remote_addr 1 $remote_user 2 "$request" '
                                     '$status 3 $body_bytes_sent 4 "$http_referer" '
                                     '5 "$http_x_forwarded_for" 6';

    # log_format main                 '$remote_addr - $remote_user - "$request" $status $body_bytes_sent';
    
    access_log                      /var/log/nginx/access.log main;

    sendfile                        on;
    keepalive_timeout               65;
    # gzip                          on;

    # http -> https redirect
    server {
        listen                      80;
        return                      301 https://$host$request_uri;
    }

    server {

        # Enable ssl/tls (https): copy certificate to /etc/nginx/ssl and uncomment lines below
        listen                      443 ssl;
        ssl_certificate             /etc/nginx/ssl/cert.crt;
        ssl_certificate_key         /etc/nginx/ssl/cert.key;

        # password authentication (default: iot49/iot49)
        # auth_basic                  "iot49: Electronics for IoT";
        # auth_basic_user_file        htpasswd;

        # Docker DNS
        resolver                    127.0.0.11;       

        # Jupyter
        # also block direct access to server (http://server.local:8123)
        # in Dockerfile, set JUPYTER_IP=127.0.0.1 (or is it the address of nginx?)
        location /jupyter/ {
            # host ip set dynamically!
            proxy_pass              http://HOST_IP:8888;
            proxy_redirect          off;
            proxy_set_header        Host $host;

            # websocket support
            proxy_http_version      1.1;
            proxy_set_header        Upgrade "websocket";
            proxy_set_header        Connection "Upgrade";
        }

        # Code-server
        location /code-server/ {
            # the trailing slash is required!
            proxy_pass              http://code-server:8443/;
            proxy_redirect          off;
            proxy_set_header        Host $http_host;
            proxy_http_version      1.1;
            proxy_set_header        Upgrade $http_upgrade;
            proxy_set_header        Connection "upgrade";
        }

        # Duplicati
        location /duplicati {
            return                  301 $scheme://$host/duplicati/;
        }
        location ^~ /duplicati/ {
            set                     $duplicati_pass "duplicati:8200";
            rewrite                 /duplicati(.*) $1 break;
            proxy_pass              http://${duplicati_pass};
        }

        # Wireshark
        # Don't know how to proxy, so using redirect to http instead ...
        # Note: no encryption!
        location /wireshark {
            return                  301 http://$http_host:3000/;
        }

        # Balena-CLI
        # https://serverfault.com/questions/511109/nginx-local-fallback-error-page-if-proxy-destination-is-unavailable
        # proxy_intercept_errors on ??? NOPE
        location /balena-cli/ {
            set                     $balena_cli "http://balena-cli:8891";
            proxy_pass              $balena_cli;
            # proxy_pass              http://balena-cli:8891;
            proxy_redirect          off;
            proxy_set_header        Host $host;
            # proxy_intercept_errors on;

            # websocket support
            proxy_http_version      1.1;
            proxy_set_header        Upgrade "websocket";
            proxy_set_header        Connection "Upgrade";
        }

        # Homeassistant
        location /homeassistant {
            return                  301 http://$http_host:8123/;
        }

        # This works, but traffic is not encrypted.
        location /esphome {
            return                  301 http://$http_host:6052/;
        }

        location /plex {
            return                  301 http://$http_host:32400/web/;
        }

        location /influxdb {
            return                  301 http://$http_host:8086;
        }

        # https://grafana.com/tutorials/run-grafana-behind-a-proxy/
        location /grafana {
            return                  301 http://$http_host:3001;
        }

        # static content
        location / {
            auth_basic              off;
            root                    /service-config/www;
            index                   index.html index.htm;
        }

    }

}
